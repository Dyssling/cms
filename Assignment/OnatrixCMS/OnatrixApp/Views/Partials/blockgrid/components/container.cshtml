@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;

@{
    bool marginRight = Model.Content.Value<bool>("marginRight");
    bool marginLeft = Model.Content.Value<bool>("marginLeft");
    bool marginTopAndBottom = Model.Content.Value<bool>("marginTopAndBottom");
    bool paddingSides = Model.Content.Value<bool>("paddingSides");
    bool paddingTop = Model.Content.Value<bool>("paddingTop");
    bool paddingBottom = Model.Content.Value<bool>("paddingBottom");
    bool shadow = Model.Content.Value<bool>("shadow");

    var bgColorClass = "";
    var bgColorLabel = Model.Content.Value<ColorPickerValueConverter.PickedColor>("backgroundColor")?.Label ?? null;

    if (!bgColorLabel.IsNullOrWhiteSpace())
    {
        
        bgColorClass = $" bg-{bgColorLabel.ToLower()}";
    }

    var classString = $"block-grid-container{bgColorClass}{(shadow ? " container-shadow" : "")}{(marginRight ? " container-margin-right" : "")}{(marginLeft ? " container-margin-left" : "")}{(marginTopAndBottom ? " container-margin-top-bottom" : "")}{(paddingSides ? " container-padding-sides" : "")}{(paddingTop ? " container-padding-top" : "")}{(paddingBottom ? " container-padding-bottom" : "")}";
}

<div class="@classString">
    @await Html.GetBlockGridItemAreasHtmlAsync(Model)
</div>