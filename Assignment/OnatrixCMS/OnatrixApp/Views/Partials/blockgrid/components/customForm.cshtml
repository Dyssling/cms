@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;

@{
    bool nameField = Model.Content.Value<bool>("nameField");
    bool emailField = Model.Content.Value<bool>("emailField");
    bool phoneField = Model.Content.Value<bool>("phoneField");
    bool messageBox = Model.Content.Value<bool>("messageBox");
    bool fullWidthButton = Model.Content.Value<bool>("fullWidthButton");
    bool listLayout = Model.Content.Value<bool>("listLayout");

    var buttonColorLabel = Model.Content.Value<ColorPickerValueConverter.PickedColor>("buttonColor")!.Label.ToLower();

    //test

    var serviceList = Model.Content.Value<IEnumerable<BlockListItem>>("serviceSelector");

    if (serviceList == null)
    {
        serviceList = new List<BlockListItem>();
    }
}

@using (Html.BeginUmbracoForm("HandleSubmit", "Form", FormMethod.Post))
{
    <div class="form-grid@(listLayout ? " form-list-layout" : "")">
        @if (nameField == true)
        {
            var nameValue = ViewData["NameValue"] ?? "";
            var nameError = ViewData["NameError"];

            <div class="input-container">
                <input type="text" id="name" name="name" placeholder="Name" value="@nameValue">

                @if (nameError != null)
                {
                    <p class="form-error-msg">@nameError</p>
                }

            </div>
        }

        @if (emailField == true)
        {
            var emailValue = ViewData["EmailValue"] ?? "";
            var emailError = ViewData["EmailError"];

            <div class="input-container">
                <input type="email" id="email" name="email" placeholder="Email address" value="@emailValue">

                @if (emailError != null)
                {
                    <p class="form-error-msg">@ViewData["EmailError"]</p>
                }

            </div>
        }

        @if (phoneField == true)
        {
            var phoneValue = ViewData["PhoneValue"] ?? "";
            var phoneError = ViewData["PhoneError"];

            <div class="input-container">
                <input type="text" id="phone" name="phone" placeholder="Phone" value="@phoneValue">

                @if (phoneError != null)
                {
                    <p class="form-error-msg">@ViewData["PhoneError"]</p>
                }

            </div>
        }

        @if (serviceList.Any())
        {
            <select name="service" id="service">
                @foreach (var item in serviceList)
                {
                    var service = item.Content.Value("item")!.ToString();
                    var selectedService = ViewData["ServiceValue"] ?? "";

                    if (service == selectedService.ToString())
                    {
                        <option value="@service" selected="selected">@service</option>
                    }

                    else
                    {
                        <option value="@service">@service</option>
                    }
                }
            </select>
        }

        @if (messageBox == true)
        {
            var messageValue = ViewData["MessageValue"] ?? "";
            var messageError = ViewData["MessageError"];

            <div class="input-container">
                <textarea id="message" name="message" placeholder="Message" value="@messageValue"></textarea>

                @if (messageError != null)
                {
                    <p class="form-error-msg">@ViewData["MessageError"]</p>
                }

            </div>
        }
    </div>
    <button class="btn btn-@buttonColorLabel@(fullWidthButton ? " full-width" : "")" type="submit" formnovalidate="formnovalidate">Submit</button>

    @if (ViewData["SuccessMessage"] != null)
    {
        <p class="form-success-msg">@ViewData["SuccessMessage"]</p>
    }
}