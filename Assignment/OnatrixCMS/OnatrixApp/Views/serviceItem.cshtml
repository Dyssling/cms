@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ServiceItem>;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@inject Umbraco.Cms.Web.Common.UmbracoHelper UmbracoHelper;

@{
	Layout = "mainLayout.cshtml";

    ViewBag.Title = Model.Name;

    var rootContent = UmbracoHelper.ContentAtRoot();
    var settings = rootContent?.FirstOrDefault(x => x.ContentType.Alias == "settingsPage") ?? null;

    var sidebarImgUrl = settings?.Value<IPublishedContent>("imageForSidebar")?.Url() ?? null;
    var aboutUsText = settings?.Value<string>("shortDescriptionOfTheCompany") ?? null;
}
	<section class="page-top bg-gray">
		<h1>@Model.Name</h1>
        @await Html.PartialAsync("partials/static/breadcrumbs.cshtml")
	</section>
	<section class="article-section">
		<div class="container">
			<aside class="sidebar">
				@if (!aboutUsText.IsNullOrWhiteSpace()){
					<h5>About us</h5>
					@if (!sidebarImgUrl.IsNullOrWhiteSpace()){
						<img src="@sidebarImgUrl" alt="">
					}
					<p class="about-us-text">
						@aboutUsText
					</p>
				}
            @using (Html.BeginUmbracoForm("HandleSupportBoxSubmit", "Form", FormMethod.Post))
            {
                var supportBoxEmailValue = ViewData["SupportBoxEmailValue"] ?? "";
                var supportBoxEmailError = ViewData["SupportBoxEmailError"];

                <div class="support-box bg-primary">
                    <h5>How can we help you?</h5>
                    <p class="support-text">online support 24/7, we are here to help you</p>
                    <div class="input-container">
                        <input type="email" id="supportBoxEmail" name="supportBoxEmail" placeholder="Email address" value="@supportBoxEmailValue">
                        <button type="submit" class="btn" formnovalidate="formnovalidate"><i class="fa-regular fa-envelope"></i></button>
                    </div>
                    @if (supportBoxEmailError != null)
                    {
                        <p class="form-error-msg">@ViewData["SupportBoxEmailError"]</p>
                    }
                    @if (ViewData["SupportBoxSuccessMessage"] != null)
                    {
                        <p class="form-success-msg">@ViewData["SupportBoxSuccessMessage"]</p>
                    }
                </div>
            }
			</aside>
			<article>
				@await Html.GetBlockGridHtmlAsync(Model.Content)
			</article>
		</div>
	</section>
	<section class="question-form">
		<div class="container">
			<h4>Have a question?</h4>
        @using (Html.BeginUmbracoForm("HandleSubmit", "Form", FormMethod.Post))
        {
            var nameValue = ViewData["NameValue"] ?? "";
            var nameError = ViewData["NameError"];
            var emailValue = ViewData["EmailValue"] ?? "";
            var emailError = ViewData["EmailError"];
            var messageValue = ViewData["MessageValue"] ?? "";
            var messageError = ViewData["MessageError"];

            <div class="grid">
                <div class="input-container">
                    <input type="text" id="name" name="name" placeholder="Name" value="@nameValue">

                    @if (nameError != null)
                    {
                        <p class="form-error-msg">@nameError</p>
                    }

                </div>
                <div class="input-container">
                    <input type="email" id="email" name="email" placeholder="Email address" value="@emailValue">

                    @if (emailError != null)
                    {
                        <p class="form-error-msg">@ViewData["EmailError"]</p>
                    }

                </div>
                <div class="input-container span-2">
                    <textarea id="message" name="message" placeholder="Question" value="@messageValue"></textarea>

                    @if (messageError != null)
                    {
                        <p class="form-error-msg">@ViewData["MessageError"]</p>
                    }

                </div>
            </div>
            <button type="submit" class="btn btn-primary" formnovalidate="formnovalidate">Submit</button>
            @if (ViewData["SuccessMessage"] != null)
            {
                <p class="form-success-msg">@ViewData["SuccessMessage"]</p>
            }
        }
		</div>
	</section>
    <section class="contact-info-section bg-gray">
        @await Html.PartialAsync("partials/static/contactInfo.cshtml")
    </section>